***** Final Review *****

Topics:

	1. Graphs 
		1.a: DFS / BFS:	
		1.b: DAG, SCC:
		1.c: MST Via Kruskal and Prim:
		1.d: Dijkstra:
		1.e: Bellman-Ford:
		1.f: Floyd-Warshall:

	2. Algorithm Methods:
		2.a: Divide and Conquer:
			-- Merge Sort
			-- Quick Sort
			-- Exponentiation:
			-- Multiplication: 	
			-- Strassen's Algorithm
				
		2.b: Greedy Approach:
			--  
		2.c: Dynamic Programming
			-- 

	3. Data Structures:
		3.a Heap:
			- Min / Max Heap
			- Heapify (Min / Max)
			- Heapsort
			- k-arry Heap (Priority Queue)
		
		3.b Tree:
			- Binary Search Tree
			- Balanced BST
			- Methods:
				- Insert()
				- FindMin()
				- Delete()
					- Complex Cases for Delete:

				- InOrder/PostOrder Traversals:

		3.c Hash Table:
			- 
		
	4. Foundations:
		- Running Time Analysis of All Previously Mentioned 
		- Inductive Proofs
	
Things to Include on Cheet Sheet:

1. Topological Sortting:
	- method 1: Khans / SRSN
	- method 2: DFS then sort by decreasing ftime

2. Strongly Connected Components:
	- Find the SCC's of G
		- naive method is to run DFS on each node in G
		- optimal solution:
			1. compute G and G^T
			2. run DFS on G and receive order of ftime decreasing:
				ex: [A,  F,  G,  C,  D,  H,  B,  K,  E]
					[18, 17, 16, 12, 11, 10, 9,  8,  4]

			3. Run DFS on G^T priority undiscovered node with largest
				ftime in DFS on G (from table above) (ex. we start with A)

			4. Each tree produced by DFS(G^T) represents a strongly connected
				component in G

			5. Draw out the strongly connected components on G, and considering
				the ftimes of each node in G(original) do a topological sort
				by decreasing ftime. There shouldn't be ambiguous cases in terms of 
				staggered ftimes in different componennts.
		
			6. Draw the forward edges on the topological sort, then we are done. 

3. Minimum Spanning Trees	
	- Kruskal's Algoithm

		step1: define a cluster for each v e V(G) O(n)
		step2: sort the edges, e.i e E(G) in non-decreasing order
		step3: loop through each edge:
			
				if edge (v, u) has C(v) != C(u):
					add e = (u,v) to T as  T = T U {e}
				
				else: scratch the edge and try next
		step 4: merge clusters

		Running Time:

		   def cluster        loop edges		
				|	sort edges    |		merge cluster cost   T = T U {e.i}
				|		|		  |		   |
		T(n) = O(n) + O(mlogn) + O(m) + O(nlogn)
			<= O()

	- Prims Algorithm

		step1: initialize key of src node to 0, all else to inf O(n)
		step2: extract min from PQ(minheap) in O(logn) time and traverse
				neighbor nodes of extracted node (cut edges)

				if the weight of this cut edge is less than v.neighbour.key
				update v.neighbor with decreaseKey(Q, v.nieghbour, w(v, v.neighbour))

		step3: Upon next itteration of while loop, previous vertex is gone (we are
				confident it is in MST) and the neighbours of said removed node are 
				updated is a cheaper weight is found. 

		step4: Repeat step 2 until the queue is empty. Then the sequence of extracted
				nodes represents the edges of the MST
		
		Running Time:
			
	
4. Dijkstra's Algorithm

	Dijkstra's algorithm is very simply Prim's algorithm, the decreaseKey step
	augmented in a slight way.

	instead of (Prim's):
		for each neighbour v.i in v:
			if w(v, v.i) < v.i.key:
				decreaseKey(Q, v.i, w(v, v.i))

	in Dijkstra we keep a rolling sum of each weighted edge and call it the distance.
	
	dijkstras:
		for each neighbour v.i in v:
			if v.i.dist + w(v, v.i) < v.i.key:
				decreaseKey(Q, v.i, v.dist + w(v,v.i))


5. Bellmand-Ford
	
	- redundant tablulations on the permutations of paths, however enables us
	to check if graphs contain negative cycles. N-1 loops in which each vertex is 
	compared with its previous itteration and the minimum path from its neighbours + 
	the weighted edge.


	filling in the table: First initialize d^0 with 0 inf inf inf ..... inf
	then for each row, we do for each vertex v in G:
		
		1. take minimum: d^i+1[v] = min(d^i[v], min(
													d^i[u.1] + w(u.1, v)
													d^i[u.2] + w(u.2, v)
													...
													...
													d^i[u.n] + w(u.n, v)			
												))
		
		2. update the table @ d^(i+1)[v] with that min value.

		3. Continue for each vertex over N-1 outter itterations

		4. confirm that the grpah has no negative cycles by repeating an itteration
			one final time. If the last itteration produces a value less than 
			the previous final itteration, we can conclude that there must exist 
			a negative cycle in the graph, we return FALSE

			pseudoCode for bellman-ford:

			proceedure bellman-ford(G, s):
				
				#init the table 
				for v in V(G):
					d[v] = inf   #infinite distance 
					p[v] = NULL  #no predecessor

				d[s] = 0

				for i <- 1 to N-1:
					for v in V(G):
						d^i+1[v] = min(d^i[v], min_for u in neighbours of v(
							d^i[u.1] + w[v, u.1]
								....
							d^i[u.n] + w[v, u.n]
						))

				# final itteration to determine if there exists negative cycles
				for edge e=(v,u) in E(G):
					if d[u] + w(u,v) < d[v]:
						return FALSE		# Exists negative cycle!

				return TRUE

6. Floyd-Warshal
	
	-Dynamic Programming Algorithm
	










